/*
 * alertmanager
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PolicySchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-08T20:03:43.869553Z[Etc/UTC]")
public class PolicySchema {
  public static final String SERIALIZED_NAME_CHANNELS = "channels";
  @SerializedName(SERIALIZED_NAME_CHANNELS)
  private List<String> channels = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_SOURCE = "client_source";
  @SerializedName(SERIALIZED_NAME_CLIENT_SOURCE)
  private String clientSource;

  public static final String SERIALIZED_NAME_CLIENT_UUID = "client_uuid";
  @SerializedName(SERIALIZED_NAME_CLIENT_UUID)
  private String clientUuid;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private Object filters;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private Boolean frequency;

  public static final String SERIALIZED_NAME_FREQUENCY_MINUTES = "frequency_minutes";
  @SerializedName(SERIALIZED_NAME_FREQUENCY_MINUTES)
  private Integer frequencyMinutes;

  public static final String SERIALIZED_NAME_FREQUENCY_OCCURRENCES = "frequency_occurrences";
  @SerializedName(SERIALIZED_NAME_FREQUENCY_OCCURRENCES)
  private Integer frequencyOccurrences;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public PolicySchema() {
  }

  public PolicySchema channels(List<String> channels) {
    
    this.channels = channels;
    return this;
  }

  public PolicySchema addChannelsItem(String channelsItem) {
    if (this.channels == null) {
      this.channels = new ArrayList<>();
    }
    this.channels.add(channelsItem);
    return this;
  }

   /**
   * List of channel notification
   * @return channels
  **/
  @javax.annotation.Nonnull
  public List<String> getChannels() {
    return channels;
  }


  public void setChannels(List<String> channels) {
    this.channels = channels;
  }


  public PolicySchema clientSource(String clientSource) {
    
    this.clientSource = clientSource;
    return this;
  }

   /**
   * Policy Client source
   * @return clientSource
  **/
  @javax.annotation.Nonnull
  public String getClientSource() {
    return clientSource;
  }


  public void setClientSource(String clientSource) {
    this.clientSource = clientSource;
  }


  public PolicySchema clientUuid(String clientUuid) {
    
    this.clientUuid = clientUuid;
    return this;
  }

   /**
   * Policy Client UUID
   * @return clientUuid
  **/
  @javax.annotation.Nonnull
  public String getClientUuid() {
    return clientUuid;
  }


  public void setClientUuid(String clientUuid) {
    this.clientUuid = clientUuid;
  }


  public PolicySchema createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public PolicySchema deleted(Boolean deleted) {
    
    this.deleted = deleted;
    return this;
  }

   /**
   * Policy deleted
   * @return deleted
  **/
  @javax.annotation.Nonnull
  public Boolean getDeleted() {
    return deleted;
  }


  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public PolicySchema enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Policy enabled
   * @return enabled
  **/
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public PolicySchema filters(Object filters) {
    
    this.filters = filters;
    return this;
  }

   /**
   * Policy filters
   * @return filters
  **/
  @javax.annotation.Nonnull
  public Object getFilters() {
    return filters;
  }


  public void setFilters(Object filters) {
    this.filters = filters;
  }


  public PolicySchema frequency(Boolean frequency) {
    
    this.frequency = frequency;
    return this;
  }

   /**
   * Enable alert frequency for the policy
   * @return frequency
  **/
  @javax.annotation.Nonnull
  public Boolean getFrequency() {
    return frequency;
  }


  public void setFrequency(Boolean frequency) {
    this.frequency = frequency;
  }


  public PolicySchema frequencyMinutes(Integer frequencyMinutes) {
    
    this.frequencyMinutes = frequencyMinutes;
    return this;
  }

   /**
   * Quantity of alert interval time
   * @return frequencyMinutes
  **/
  @javax.annotation.Nonnull
  public Integer getFrequencyMinutes() {
    return frequencyMinutes;
  }


  public void setFrequencyMinutes(Integer frequencyMinutes) {
    this.frequencyMinutes = frequencyMinutes;
  }


  public PolicySchema frequencyOccurrences(Integer frequencyOccurrences) {
    
    this.frequencyOccurrences = frequencyOccurrences;
    return this;
  }

   /**
   * Quantity of alert occurrencies
   * @return frequencyOccurrences
  **/
  @javax.annotation.Nonnull
  public Integer getFrequencyOccurrences() {
    return frequencyOccurrences;
  }


  public void setFrequencyOccurrences(Integer frequencyOccurrences) {
    this.frequencyOccurrences = frequencyOccurrences;
  }


  public PolicySchema id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public PolicySchema name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Policy name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public PolicySchema updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicySchema policySchema = (PolicySchema) o;
    return Objects.equals(this.channels, policySchema.channels) &&
        Objects.equals(this.clientSource, policySchema.clientSource) &&
        Objects.equals(this.clientUuid, policySchema.clientUuid) &&
        Objects.equals(this.createdAt, policySchema.createdAt) &&
        Objects.equals(this.deleted, policySchema.deleted) &&
        Objects.equals(this.enabled, policySchema.enabled) &&
        Objects.equals(this.filters, policySchema.filters) &&
        Objects.equals(this.frequency, policySchema.frequency) &&
        Objects.equals(this.frequencyMinutes, policySchema.frequencyMinutes) &&
        Objects.equals(this.frequencyOccurrences, policySchema.frequencyOccurrences) &&
        Objects.equals(this.id, policySchema.id) &&
        Objects.equals(this.name, policySchema.name) &&
        Objects.equals(this.updatedAt, policySchema.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channels, clientSource, clientUuid, createdAt, deleted, enabled, filters, frequency, frequencyMinutes, frequencyOccurrences, id, name, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicySchema {\n");
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    clientSource: ").append(toIndentedString(clientSource)).append("\n");
    sb.append("    clientUuid: ").append(toIndentedString(clientUuid)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    frequencyMinutes: ").append(toIndentedString(frequencyMinutes)).append("\n");
    sb.append("    frequencyOccurrences: ").append(toIndentedString(frequencyOccurrences)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channels");
    openapiFields.add("client_source");
    openapiFields.add("client_uuid");
    openapiFields.add("created_at");
    openapiFields.add("deleted");
    openapiFields.add("enabled");
    openapiFields.add("filters");
    openapiFields.add("frequency");
    openapiFields.add("frequency_minutes");
    openapiFields.add("frequency_occurrences");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("channels");
    openapiRequiredFields.add("client_source");
    openapiRequiredFields.add("client_uuid");
    openapiRequiredFields.add("deleted");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("filters");
    openapiRequiredFields.add("frequency");
    openapiRequiredFields.add("frequency_minutes");
    openapiRequiredFields.add("frequency_occurrences");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PolicySchema
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicySchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicySchema is not found in the empty JSON string", PolicySchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicySchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicySchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PolicySchema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("channels") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("channels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `channels` to be an array in the JSON string but got `%s`", jsonObj.get("channels").toString()));
      }
      if (!jsonObj.get("client_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_source").toString()));
      }
      if (!jsonObj.get("client_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_uuid").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicySchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicySchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicySchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicySchema.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicySchema>() {
           @Override
           public void write(JsonWriter out, PolicySchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicySchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PolicySchema given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PolicySchema
  * @throws IOException if the JSON string is invalid with respect to PolicySchema
  */
  public static PolicySchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicySchema.class);
  }

 /**
  * Convert an instance of PolicySchema to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

