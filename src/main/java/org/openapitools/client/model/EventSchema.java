/*
 * alertmanager
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EventSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-06T15:51:09.937846Z[Etc/UTC]")
public class EventSchema {
  public static final String SERIALIZED_NAME_CLIENT_SOURCE = "client_source";
  @SerializedName(SERIALIZED_NAME_CLIENT_SOURCE)
  private String clientSource;

  public static final String SERIALIZED_NAME_CLIENT_UUID = "client_uuid";
  @SerializedName(SERIALIZED_NAME_CLIENT_UUID)
  private String clientUuid;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "event_type";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Object labels;

  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "schema_version";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  private String schemaVersion;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private String severity;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public EventSchema() {
  }

  public EventSchema clientSource(String clientSource) {
    
    this.clientSource = clientSource;
    return this;
  }

   /**
   * Event souce
   * @return clientSource
  **/
  @javax.annotation.Nonnull
  public String getClientSource() {
    return clientSource;
  }


  public void setClientSource(String clientSource) {
    this.clientSource = clientSource;
  }


  public EventSchema clientUuid(String clientUuid) {
    
    this.clientUuid = clientUuid;
    return this;
  }

   /**
   * Client uuid. This is the id defined by client app
   * @return clientUuid
  **/
  @javax.annotation.Nonnull
  public String getClientUuid() {
    return clientUuid;
  }


  public void setClientUuid(String clientUuid) {
    this.clientUuid = clientUuid;
  }


  public EventSchema createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public EventSchema data(Object data) {
    
    this.data = data;
    return this;
  }

   /**
   * Event data
   * @return data
  **/
  @javax.annotation.Nonnull
  public Object getData() {
    return data;
  }


  public void setData(Object data) {
    this.data = data;
  }


  public EventSchema eventType(String eventType) {
    
    this.eventType = eventType;
    return this;
  }

   /**
   * Event type
   * @return eventType
  **/
  @javax.annotation.Nonnull
  public String getEventType() {
    return eventType;
  }


  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public EventSchema id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public EventSchema labels(Object labels) {
    
    this.labels = labels;
    return this;
  }

   /**
   * Event labels
   * @return labels
  **/
  @javax.annotation.Nonnull
  public Object getLabels() {
    return labels;
  }


  public void setLabels(Object labels) {
    this.labels = labels;
  }


  public EventSchema schemaVersion(String schemaVersion) {
    
    this.schemaVersion = schemaVersion;
    return this;
  }

   /**
   * Event schema version. Can be used by client app to know how to parse the event
   * @return schemaVersion
  **/
  @javax.annotation.Nonnull
  public String getSchemaVersion() {
    return schemaVersion;
  }


  public void setSchemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
  }


  public EventSchema severity(String severity) {
    
    this.severity = severity;
    return this;
  }

   /**
   * Event severity
   * @return severity
  **/
  @javax.annotation.Nonnull
  public String getSeverity() {
    return severity;
  }


  public void setSeverity(String severity) {
    this.severity = severity;
  }


  public EventSchema status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Event status, Received, Stored
   * @return status
  **/
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public EventSchema updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventSchema eventSchema = (EventSchema) o;
    return Objects.equals(this.clientSource, eventSchema.clientSource) &&
        Objects.equals(this.clientUuid, eventSchema.clientUuid) &&
        Objects.equals(this.createdAt, eventSchema.createdAt) &&
        Objects.equals(this.data, eventSchema.data) &&
        Objects.equals(this.eventType, eventSchema.eventType) &&
        Objects.equals(this.id, eventSchema.id) &&
        Objects.equals(this.labels, eventSchema.labels) &&
        Objects.equals(this.schemaVersion, eventSchema.schemaVersion) &&
        Objects.equals(this.severity, eventSchema.severity) &&
        Objects.equals(this.status, eventSchema.status) &&
        Objects.equals(this.updatedAt, eventSchema.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientSource, clientUuid, createdAt, data, eventType, id, labels, schemaVersion, severity, status, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventSchema {\n");
    sb.append("    clientSource: ").append(toIndentedString(clientSource)).append("\n");
    sb.append("    clientUuid: ").append(toIndentedString(clientUuid)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client_source");
    openapiFields.add("client_uuid");
    openapiFields.add("created_at");
    openapiFields.add("data");
    openapiFields.add("event_type");
    openapiFields.add("id");
    openapiFields.add("labels");
    openapiFields.add("schema_version");
    openapiFields.add("severity");
    openapiFields.add("status");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("client_source");
    openapiRequiredFields.add("client_uuid");
    openapiRequiredFields.add("data");
    openapiRequiredFields.add("event_type");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("labels");
    openapiRequiredFields.add("schema_version");
    openapiRequiredFields.add("severity");
    openapiRequiredFields.add("status");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EventSchema
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventSchema is not found in the empty JSON string", EventSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventSchema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("client_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_source").toString()));
      }
      if (!jsonObj.get("client_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_uuid").toString()));
      }
      if (!jsonObj.get("event_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_type").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("schema_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schema_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schema_version").toString()));
      }
      if (!jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<EventSchema>() {
           @Override
           public void write(JsonWriter out, EventSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventSchema given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventSchema
  * @throws IOException if the JSON string is invalid with respect to EventSchema
  */
  public static EventSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventSchema.class);
  }

 /**
  * Convert an instance of EventSchema to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

